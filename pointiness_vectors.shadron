#version 450

#include <hsv.shadron>
#include <math_constants>

param vec2 tweak = vec2(2000, 1) : range(-1, 10);

image Img = file("inputs/curvyboii.png") : map(clamp);

// perceptual luminance-preserving conversion to greyscale
 float greyscale(vec4 a) {
    return dot(a.rgb, vec3(0.2126, 0.7152, 0.0722));
}

 vec2 derivative(float f) {
    return vec2(dFdx(f), dFdy(f));
}

 float cross2(vec2 a, vec2 b) { // 2D cross product.
    return cross(vec3(a, 0), vec3(b, 0)).z;
}

vec4 pointiness(vec2 pos) {
    // return vec4(pos, 0, 1);



    vec2 p = vec2(0); {
        const float n = 64;
        for (float i=0; i<n; i+=1) {
            float t = i * TAU / n;
            mat2 R = mat2(cos(t), -sin(t), sin(t), cos(t));
            mat2 R2 = mat2(cos(t), sin(t), -sin(t), cos(t));
            vec2 d = derivative(greyscale(texture(Img, pos + tweak.y * shadron_PixelSize * R * vec2( 0, -1))));
            vec2 r = derivative(greyscale(texture(Img, pos + tweak.y * shadron_PixelSize * R * vec2( 1,  0))));
            p += R * vec2(-1, 1) * cross2(r, d);
        }
        p /= n;
    }
    vec2 pointiness = p;

    vec4 c = vec4(0);
    c.rgb = hsv(
        atan(pointiness.y, pointiness.x) / (TAU/1),
        1,
        length(pointiness) * tweak.x
    );
    c.a = 1;
    return c;
}

image Pointiness = glsl(pointiness, sizeof Img);
