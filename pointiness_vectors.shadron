#version 450

#include <hsv.shadron>
#include <math_constants>

param vec2 tweak = vec2(1, 1) : range(-1, 10);

image Img = file("inputs/curvyboii.png") : map(clamp);

// perceptual luminance-preserving conversion to greyscale
 float greyscale(vec4 a) {
    return dot(a.rgb, vec3(0.2126, 0.7152, 0.0722));
}

 vec2 derivative(float f) {
    return vec2(dFdx(f), dFdy(f));
}

 float cross2(vec2 a, vec2 b) { // 2D cross product.
    return cross(vec3(a, 0), vec3(b, 0)).z;
}

float intensity(vec2 pos) {
    return greyscale(texture(Img, pos));
}

vec4 pointiness(vec2 pos) {
    // vec2 p = vec2(0); {
    //     const float n = 64;
    //     for (float i=0; i<n; i+=1) {
    //         float t = i * TAU / n;
    //         mat2 R = mat2(cos(t), -sin(t), sin(t), cos(t));
    //         mat2 R2 = mat2(cos(t), sin(t), -sin(t), cos(t));
    //         vec2 d = derivative(greyscale(texture(Img, pos + tweak.y * shadron_PixelSize * R * vec2( 0, -1))));
    //         vec2 r = derivative(greyscale(texture(Img, pos + tweak.y * shadron_PixelSize * R * vec2( 1,  0))));
    //         p += R * vec2(-1, 1) * cross2(r, d);
    //     }
    //     p /= n;
    // }
    // p *= 400;
    // return vec4(p, 0, 1);

    vec2 s = shadron_PixelSize * tweak.y;
    vec2 d = vec2(
        intensity(pos + vec2(s.x, 0)) - intensity(pos + vec2(-s.x, 0)),
        intensity(pos + vec2(0, s.y)) - intensity(pos + vec2(0, -s.y))
    );
    mat2 dd_orth = mat2(dFdy(d), -dFdx(d));
    vec2 curve = dd_orth * d * 10.0;
    return vec4(curve, 0, 1);
}

image PointinessRaw = glsl(pointiness, sizeof Img) : full_range(true), hidden(true);


vec4 pointiness_to_hsv(vec2 pointiness) {
    return vec4(
        hsv(
            atan(pointiness.y, pointiness.x) / (TAU/1),
            1,
            length(pointiness) * tweak.x
        ),
        1
    );
}

vec4 pointiness_hsv(vec2 pos) {
    return pointiness_to_hsv(texture(PointinessRaw, pos).rg);
}
image PointinessHSV = glsl(pointiness_hsv, sizeof Img);

vec4 pointiness_blurred(vec2 pos) {
    float r0 = 1/5.;
    float r1 = 1/5.;
    float r2 = 1/5.;//1/9.;
    mat3 kernel = mat3(
        r2, r1, r2,
        r1, r0, r1,
        r2, r1, r2
    );
    vec2 convolved = vec2(0);
    int convSize = 3;
    for(int i = 0; i < convSize; ++i) {
        for(int j = 0; j < convSize; ++j) {
            vec2 offset = shadron_PixelSize * vec2(
                (j - (convSize / 2)),
                (i - (convSize / 2))
            );
            convolved += kernel[i][j] * texture(PointinessRaw, pos + offset).rg;
        }
    }
    return pointiness_to_hsv(convolved);
}
image PointinessReblurred = glsl(pointiness_blurred, sizeof Img);


// vec2 decode_hsv(vec3 hsv) {
//     return rgb(hsv).
// }
// vec4 blur_vectors(vec2 pos) {
// }
// image PointinessBlurred = glsl(blur_vectors, sizeof Img);
