#version 330

#include <shapes>
#include <math_constants>


const float max_speed = 8;
const float max_torque = 2.;

// Speed of the simulation (steps per second)
param float FPS = 60.0 : hidden;  // logrange(1.0, 1024.0);

param float theta_render_shift = .5 : range(0, .5);

// State layout:
// x - theta     // clockwise with 0=upright.
// y - theta_dot
// z - torque
// w - cost
float encode_theta(float theta) { return (theta+PI) / TAU +theta_render_shift; }
float decode_theta(float theta) { return ((theta-theta_render_shift)*TAU) - PI; }
float encode_theta_dot(float theta_dot) { return (theta_dot+max_speed) / (2*max_speed); }
float decode_theta_dot(float theta_dot) { return (theta_dot*(2*max_speed)) - max_speed; }
float encode_torque(float torque) { return (torque+max_torque) / (2*max_torque); }
float decode_torque(float torque) { return (torque*(2*max_torque)) - max_torque; }
float encode_cost(float cost) { return cost+1; }
float decode_cost(float cost) { return cost-1; }


// ============== Simulation ==============

#define PARAM_COUNT 4
param ivec2 param_index = vec2(1, 3): range(0, PARAM_COUNT-1);
var vec2 selected_pos = vec2(.25, .5);

var int should_restart = 0;

param vec2 parameter_bounds_0 = vec2(-PI, PI);
param vec2 parameter_bounds_1 = vec2(-2, 2);
param vec2 parameter_bounds_2 = vec2(-20, 0);
param vec2 parameter_bounds_3 = vec2(-5, 0);

var float parameter_value_0 = PI*.5;
var float parameter_value_1 = 1;
var float parameter_value_2 = -20.0;
var float parameter_value_3 = -5;

glsl vec2[] parameter_bounds = vec2[PARAM_COUNT](
    parameter_bounds_0,
    parameter_bounds_1,
    parameter_bounds_2,
    parameter_bounds_3
);
glsl float[] params = float[PARAM_COUNT](
    parameter_value_0,
    parameter_value_1,
    parameter_value_2,
    parameter_value_3
);


vec4 initial_state(vec2 pos) {
    return vec4(
        pos,
        encode_torque(0),
        encode_cost(0)
    );
}
image InitialState = glsl(initial_state, 512, 512) : hidden;

vec2 hash22(vec2 p) {
    p = vec2( dot(p,vec2(127.1,311.7)),
              dot(p,vec2(269.5,183.3)));
    return fract(sin(p)*43758.5453123);
}
vec4 initial_state_shuffled(vec2 pos) {
    return initial_state(hash22(pos));
}
image InitialStateShuffled = glsl(initial_state_shuffled, sizeof(InitialState)) : hidden;


// event mouse_press(left_button) = handle_mouse;
// event mouse_position(left_button) = handle_mouse;
// event press(1) { mouse_select_state = 1; }
// event press(2) { mouse_select_state = 22; }
float policy(float theta, float theta_dot, float[PARAM_COUNT] p) {

    if (abs(theta) > p[0]) return theta_dot * p[1];  // if we're low on energy, give a push
    return p[2] * theta  + p[3] * theta_dot; // acceleration towards being still at the top.

    // if (cos(theta) < 0) return theta_dot;  // if we're low on energy, give a push
    // return -10 * sin(theta)  - 5 * theta_dot; // acceleration towards being still at the top.
    // return -10.0 * theta - 1 * theta_dot;
    // return -max_torque;
    // if (abs(theta) < .1) return -8*theta;
    // return -80. * theta;
}

float angle_normalize(float x) {  // Returns angle x but within -pi .. pi
    x = mod(x, TAU);
    x = (x < 0)? x+TAU : x; // if (x < 0) {  x += TAU;  }
    x = (x <= PI)? x : x - TAU;
    return x;
}

float square(float x) {
    return x*x;
}



vec4 simulation_step(float theta, float theta_dot, float torque, float prev_cost) {
    float dt = .05 * .5;
    float g = 10;
    float m = 1;
    float l = 1;

    torque = clamp(torque, -max_torque, max_torque);
    float cost = square(angle_normalize(theta)) + .1 * square(theta_dot) + .001 * square(torque);

    float newthdot = theta_dot + (-3 * g / (2 * l) * sin(theta + PI) + 3. / (m * square(l)) * torque) * dt;
    float newth = theta + newthdot * dt;
    newthdot = clamp(newthdot, -max_speed, max_speed);

    theta = angle_normalize(newth);
    theta_dot = newthdot;

    cost = mix(prev_cost, cost, .01);
    return vec4(
        encode_theta(theta),
        encode_theta_dot(theta_dot),
        encode_torque(torque),
        encode_cost(cost)
    );
}

vec4 single_param_sim_step(sampler2D prev_states, vec2 pos) {
    vec4 prev = texture(prev_states, pos);
    if (should_restart>0) prev = initial_state(pos);
    float theta = decode_theta(prev.x);
    float theta_dot = decode_theta_dot(prev.y);
    float prev_cost = decode_cost(prev.w);

    float torque = policy(theta, theta_dot, params);
    return simulation_step(theta, theta_dot, torque, prev_cost);
}

vec2 unmix(vec2 a, vec2 b, vec2 x) {
    return (x-a) / (b-a);
}

vec4 cross_param_simulation(sampler2D prev_states, vec2 pos) {
    vec4 prev = texture(prev_states, pos);
    if (should_restart>0) prev = initial_state_shuffled(pos);
    float theta = decode_theta(prev.x);
    float theta_dot = decode_theta_dot(prev.y);
    float prev_cost = decode_cost(prev.w);

    float []adjusted_params = params;
    vec2 bx = parameter_bounds[param_index.x];  adjusted_params[param_index.x] = mix(bx.x, bx.y, pos.x);
    vec2 by = parameter_bounds[param_index.y];  adjusted_params[param_index.y] = mix(by.x, by.y, pos.y);
    float torque = policy(theta, theta_dot, adjusted_params);
    return simulation_step(theta, theta_dot, torque, prev_cost);
}

// =========== Rendering ===========


float inside(float signed_distance) {
    return smoothstep(0, 0.0001, signed_distance);
}

vec4 blend(inout vec4 buffer, in vec4 overlay) {
    buffer = vec4(mix(buffer.rgb, overlay.rgb, overlay.a), min(1, overlay.a+buffer.a));
    return buffer;
}

vec4 render_pendulum(vec2 pos, float theta) {
    vec4 col = vec4(0);
    vec2 tip = vec2(-sin(theta), cos(theta));
    col = mix(col, vec4(.7,0,0,1), inside(lineDistance(pos, vec2(0,0), tip, .2)));
    col = mix(col, vec4(0,0,0,1), inside(circleDistance(pos, vec2(0,0), .04)));
    return col;
}

float ring_distance(vec2 pos, float r, float half_width) {
    return half_width-abs(r-length(pos));
}

vec4 render_torque(vec2 pos, float torque) {  // torque acepts -1..1
    pos.x *= torque < 0? -1 : 1;
    torque = abs(torque);

    vec4 col = vec4(0);
    float r = .8;
    float half_width = .05;
    float d = ring_distance(pos, r, half_width);
    float head = torque / max_torque * PI * .8;  // angle of the tip
    float tail = head - .8;
    vec2 tip_head = (r-half_width) * vec2(-sin(head), cos(head));
    // vec2 tip_tail = (r+half_width) * vec2(-sin(tail), cos(tail));
    vec2 tip_tail = tip_head + vec2(-sin(head-PI/2), cos(head-PI/2));


    d = min(d, halfPlaneDistance(pos, vec2(0), vec2(0,1)));
    d = min(d, halfPlaneDistance(pos, vec2(0), -tip_head));
    d = min(d, halfPlaneDistance(pos, tip_tail, tip_head));

    col = mix(col, vec4(.4, .4, .4, 1), inside(d));
    // col = mix(col, vec4(.8, .8, .8, 1), .5*inside(halfPlaneDistance(pos, tip_tail, tip_head)));
    return col;
}

vec4 render_horizontal_vertical_line(vec2 pos) {
    float should_draw_indicator = (
        float(pos.x == selected_pos.x) +
        float(pos.y == selected_pos.y)
    );
    return vec4(vec3(.1), .4*mod(should_draw_indicator,2));
}

vec4 render_horizontal_vertical_line2(vec2 pos) {
    vec2 bounds_x = parameter_bounds[param_index.x];
    vec2 bounds_y = parameter_bounds[param_index.y];
    vec2 linepos = unmix(
        vec2(bounds_x.x, bounds_y.x),
        vec2(bounds_x.y, bounds_y.y),
        vec2(params[param_index.x], params[param_index.y])
    );
    float should_draw_indicator = (
        float(abs(pos.x - linepos.x) < .01) +
        float(abs(pos.y - linepos.y) < .01)
    );
    return vec4(vec3(.1), .4*mod(should_draw_indicator,2));
}

vec3 heat_color(float x) {
    return 1-exp2(-vec3(10.*x, x, .1*x));
}

feedback ParamChoiceToState, ParamChoiceToReward, SingleParamSimulation, InitialStateToState, InitialStateToReward, SelectedState {
    ParamChoiceToState = glsl(cross_param_simulation, sizeof(InitialState)) : initialize(initial_state_shuffled), full_range(true) , hidden;
    vec4 cross_param_reward_render(vec2 pos) {
        vec4 sim = texture(ParamChoiceToState, pos);
        float r = sim.w;
        vec4 col = vec4(heat_color(.1*r), 1);
        return blend(col, render_horizontal_vertical_line2(pos)*vec4(vec3(1), 1));
    }
    ParamChoiceToReward = glsl(cross_param_reward_render, sizeof(ParamChoiceToState)) : initialize(initial_state_shuffled);


    SingleParamSimulation = glsl(single_param_sim_step, sizeof(InitialState)) : initialize(initial_state), full_range(true) , hidden;

    vec4 simulation_render(vec2 pos) {
        vec4 sim = texture(SingleParamSimulation, pos);
        sim.x -= theta_render_shift;
        return blend(sim, render_horizontal_vertical_line(pos));
    }
    InitialStateToState = glsl(simulation_render, sizeof(SingleParamSimulation)) : initialize(initial_state);

    vec4 reward_render(vec2 pos) {
        vec4 sim = texture(SingleParamSimulation, pos);
        float r = sim.w;
        vec4 col = vec4(heat_color(.1*r), 1);
        return blend(col, render_horizontal_vertical_line(pos));
    }
    InitialStateToReward = glsl(reward_render, sizeof(SingleParamSimulation)) : initialize(initial_state);

    vec4 selected_state(vec2 pos) {
        vec4 sim = texture(SingleParamSimulation, selected_pos);
        float theta = decode_theta(sim.x);
        float torque = decode_torque(sim.z);

        pos = (pos-.5) * 2.8;
        vec4 col = render_pendulum(pos, theta);
        blend(col, render_torque(pos, torque));
        return col;
    }
    SelectedState = glsl(selected_state, 512, 512) : initialize(initial_state);
} : update_rate(FPS), filter(nearest);

vec4 policy_render(vec2 pos) {
    float torque = policy(
        decode_theta(pos.x),
        decode_theta_dot(pos.y),
        params
    );
    torque = clamp(torque, -max_torque, max_torque);
    torque /= max_torque;

    return vec4(torque, 0, -torque, 1);
}
image Policy = glsl(policy_render, sizeof(InitialState));

void handle_mouse_single_parameter(vec2 mouse_pos) {
    selected_pos = mouse_pos;
}
event mouse_press(   InitialStateToState,  left_button) = handle_mouse_single_parameter;
event mouse_position(InitialStateToState,  left_button) = handle_mouse_single_parameter;
event mouse_press(   InitialStateToReward, left_button) = handle_mouse_single_parameter;
event mouse_position(InitialStateToReward, left_button) = handle_mouse_single_parameter;

void on_mouse_ParamChoiceToReward(vec2 mouse_pos) {
    switch(param_index.x) {
        case 0: parameter_value_0 = mix(parameter_bounds_0.x, parameter_bounds_0.y, mouse_pos.x); break;
        case 1: parameter_value_1 = mix(parameter_bounds_1.x, parameter_bounds_1.y, mouse_pos.x); break;
        case 2: parameter_value_2 = mix(parameter_bounds_2.x, parameter_bounds_2.y, mouse_pos.x); break;
        case 3: parameter_value_3 = mix(parameter_bounds_3.x, parameter_bounds_3.y, mouse_pos.x); break;
    }
    switch(param_index.y) {
        case 0: parameter_value_0 = mix(parameter_bounds_0.x, parameter_bounds_0.y, mouse_pos.y); break;
        case 1: parameter_value_1 = mix(parameter_bounds_1.x, parameter_bounds_1.y, mouse_pos.y); break;
        case 2: parameter_value_2 = mix(parameter_bounds_2.x, parameter_bounds_2.y, mouse_pos.y); break;
        case 3: parameter_value_3 = mix(parameter_bounds_3.x, parameter_bounds_3.y, mouse_pos.y); break;
    }
    should_restart = 2;
}
event mouse_press(   ParamChoiceToReward, left_button) = on_mouse_ParamChoiceToReward;
event mouse_position(ParamChoiceToReward, left_button) = on_mouse_ParamChoiceToReward;
void on_cross_update() {should_restart -= 1;}
event update() = on_cross_update;
