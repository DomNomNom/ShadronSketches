#include <math_constants>

#define complex vec2

glsl {


complex complex_conjugate(complex z) {
    return complex(z.x, -z.y);
}

// Squared absolute value of a complex number
float complex_norm(complex z) {
    return dot(z, z);
}


complex complex_multiply(complex z, complex w) {
    return complex(
        z.x*w.x - z.y*w.y,
        z.x*w.y + z.y*w.x
    );
}

complex complex_phase(float angle) {
    return complex(
        cos(angle),
        sin(angle)
    );
}

complex complex_rotate(complex z, float angle) {
    return complex_multiply(z, complex_phase(angle));
}

// computes a^z where only z is complex
complex real_pow_complex(float a, complex z) {
    return pow(a, z.x) * complex(
        cos(z.y * log(a)),
        sin(z.y * log(a))
    );
}

// http://mathworld.wolfram.com/ComplexArgument.html
float complex_arg(complex z) {
    return atan(z.y, z.x);
}

// computes z^w where both are complex
// http://mathworld.wolfram.com/ComplexExponentiation.html
complex complex_pow_complex(complex z, complex w) {
    return complex_multiply(
        real_pow_complex(
            z.x*z.x + z.y*z.y,
            0.5 * w
        ),
        real_pow_complex(
            EULER,
            complex_multiply(complex(0,1), w) * complex_arg(z)
        )
    );
}

}
