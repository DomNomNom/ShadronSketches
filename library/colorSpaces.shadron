glsl {

// https://en.wikipedia.org/wiki/YUV#SDTV_with_BT.601
// based on https://stackoverflow.com/questions/9234724/how-to-change-hue-of-a-texture-with-glsl/9234854#9234854
vec3 rgb2yuv(vec3 rgb) {
    return mat3(
        vec3(0.299,  0.587,  0.114),
        vec3(0.596, -0.275, -0.321),
        vec3(0.212, -0.523,  0.311)
    ) * rgb;
}
vec3 yuv2rgb(vec3 yuv) {
    return mat3(
        vec3(1.0,  0.956,  0.621),
        vec3(1.0, -0.272, -0.647),
        vec3(1.0, -1.107,  1.704)
    ) * yuv;
}


vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 rgb2hsv(vec3 rgb) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(rgb.bg, K.wz),  vec4(rgb.gb, K.xy), step(rgb.b, rgb.g));
    vec4 q = mix(vec4(p.xyw,  rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}


// gamma correction stuff. (always use this if you compute light-amounts)
// https://www.desmos.com/calculator/74vpzqsyxy
vec3 inputExposure(inout vec3 rgb, float exposure) {
    rgb = -log2(1.0 - rgb) / exposure;
    return rgb;
}

vec3 outputExposure(inout vec3 rgb, float exposure) {
    rgb = 1.0 - exp2(-exposure * rgb);
    return rgb;
}

}
