#version 420  // https://www.opengl.org/wiki/Data_Type_(GLSL)#Initializer_lists

// I prefer spelling interpolation this way.
#define lerp mix

glsl float clamp01(float x) {
    return clamp(x, 0.0, 1.0);
}

// Returns a value in the range [a..b] given t [0..1].
// Linearly interpolates through the exponent of a power.
// Example use: expLerp(0.1, 10.0, 0.5) == 1.0
glsl float expLerp(float a, float b, float t) {
    return exp(lerp(log(a), log(b), t));
}


// Biases x towards 0 or 1 depending on the bias value.
// https://www.desmos.com/calculator/mun3qucoht
// applyBias(x, 0.0) == 0
// applyBias(x, 0.5) == x
// applyBias(x, 1.0) == 1
// applyBias(1-b, b) == b
glsl float applyBias(float x, float bias) {
    if (bias < 0.00001) return 0.0;
    x = clamp(x, 0.0, 1.0);
    float c = -log2(1 - bias);
    return 1.0 - pow(1.0 - pow(x, 1.0/c), c);
}


glsl struct KeyValue {
    float key;
    vec4 value;
};

/*
Linearly interpolates between multiple values along a key axis.
Example use:
    vec4 ramped = ramp<{
        { 0.40, {1.0, 0.0, 0.0, 1.0} },
        { 0.50, {0.0, 0.0, 1.0, 1.0} },
        { 0.60, {1.0, 1.0, 0.0, 1.0} },
    }>(0.43);
    // ramped == vec4(0.7, 0.0, 0.3, 1.0);
*/
template <KEY_VALUES>
glsl vec4 ramp(float sampleKey) {
    KeyValue keyValues[] = KEY_VALUES;
    if (sampleKey < keyValues[0].key) {
        return keyValues[0].value;
    }
    for (int i = 1; i < keyValues.length(); i++) {
        float L = keyValues[i-1].key;
        float R = keyValues[i  ].key;
        if (L <= sampleKey && sampleKey <= R) {
            return lerp(
                keyValues[i-1].value,
                keyValues[i  ].value,
                (sampleKey - L) / (R - L)
            );
        }
    }
    return keyValues[keyValues.length - 1].value;
}
