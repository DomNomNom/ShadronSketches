#include <multisample>
#include "library/complexNumbers.shadron"
#include "library/loopAnimation.shadron"
#include "library/lerp.shadron"

param float staticTime = 1 : range(0.0, 10);
param vec2 juliaShift = vec2(-0.70176, 0.3842)/2: range(-1, 1);

param float tweak = 1.0 : logrange(0.001, 100);
param float tweak2 = 4 : logrange(0.01, 10);
param float scale = 2 : range(0, 4);

param float animationPeriod = 16.0 : logrange(0.1, 60);
param float animationSmoothingRatio = 1.0 : range(0, 1);

// The input file
image inputFile = file() : map(mirror);


image Folded = glsl(multisample<fold, 4>, sizeof(inputFile));

// applies this julia transofrm around 0,0. iterations may be fractional,
// based on https://acko.net/blog/how-to-fold-a-julia-fractal/
glsl vec2 juliaFold(vec2 pos, vec2 c, float iterations) {
    for (; iterations>1.0; iterations-=1.0) {
        pos += c;
        pos = complex_multiply(pos, pos);
    }

    iterations *= 2.0;
    // now iterations is in the range [0..2)
    // 0..1 means shift, 1..2 means raise to power (1..2).
    pos += lerp(vec2(0.0), c, clamp01(iterations));
    if (iterations > 1.0) {
        pos = complex_pow_complex(pos, vec2(iterations, 0.0));
    }

    return pos;
}

glsl vec4 foldAnimation(vec2 pos, float time) {
    vec2 originalPos = pos;
    pos -= 0.5;  // translate 0,0 in center

    pos += vec2(tweak, -tweak2);
    pos /= scale;
    pos = juliaFold(pos, juliaShift, time);



    pos += 0.5;  // translate back 0,0 in botton left
    // pos = vec2(pos.x, 1.0-pos.y);  // vertical flip
    vec4 color = texture(inputFile, pos);
    color = lerp(vec4(0.1), color, color.a);
    color.a = 1.0;
    return color;
}


glsl vec4 fold(vec2 pos) {
    return foldAnimation(pos, staticTime);
}

// glsl vec4
animation FoldAnimation = glsl(
    multisampleAnimation<
        loopAnimaionSmoothly<foldAnimation, animationPeriod, animationSmoothingRatio>,
        4,
        1,
    >,
    sizeof(inputFile) * 2
);


const float fps = 30;
export png_sequence(FoldAnimation, "frames/frame_?.png", fps, animationPeriod);



